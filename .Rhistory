install.packages('lubridate')
library(lubridate)
library(knitr)
packages.install('knitr')
install.packages('knitr')
install.packages('htmltools')
install.packages('caTools')
install.packages('bitops')
install.packages('rmarkdown')
dataByDateCompleted <- by_date_completed %>% summarise_each(funs(sum(., na.rm = TRUE)))
}
data$STATE <- factor(data$STATE, levels = data$STATE[order(data$Total)])
source('~/.active-rstudio-document', echo=TRUE)
processedEventData$EVTYPE[agrep("THUNDER", processedEventData$EVTYPE)] <- "THUNDERSTORM"
source('~/.active-rstudio-document', echo=TRUE)
q()
install.packages('rsconnect')
install.packages('PKI')
install.packages('PKI')
install.packages('rsconnect')
if (!require("devtools"))
install.packages("devtools")
devtools::install_github("rstudio/rsconnect")
install.packages("Rcpp")
install.packages("rsconnect")
manipulate(myPlot(s), slider= x(0,2, step=0.1))
library("manipulate", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.1")
manipulate(myPlot(s), slider= x(0,2, step=0.1))
manipulate(myPlot, s = slider(0,2, step=0.1))
manipulate(myPlot(s), slider = x(0,2, step=0.1))
manipulate(myPlot(s), x.s = slider(0,2, step=0.1))
library(manipulate)
myPlot <- function(s){
plot(cars$dist - mean(cars$dist), car$speed - mean(car$speed))
abline(0,s)
}
# manipulate(myPlot(s), slider = x(0,2, step=0.1))
# manipulate(myPlot, s = slider(0,2, step=0.1))
manipulate(myPlot(s), x.s = slider(0,2, step=0.1))
library(manipulate)
myPlot <- function(s){
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0,s)
}
manipulate(myPlot(s), slider = x(0,2, step=0.1))
# manipulate(myPlot, s = slider(0,2, step=0.1))
# manipulate(myPlot(s), x.s = slider(0,2, step=0.1))
library(manipulate)
myPlot <- function(s){
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0,s)
}
# manipulate(myPlot(s), slider = x(0,2, step=0.1))
manipulate(myPlot, s = slider(0,2, step=0.1))
# manipulate(myPlot(s), x.s = slider(0,2, step=0.1))
library(manipulate)
myPlot <- function(s){
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0,s)
}
# manipulate(myPlot(s), slider = x(0,2, step=0.1))
# manipulate(myPlot, s = slider(0,2, step=0.1))
manipulate(myPlot(s), x.s = slider(0,2, step=0.1))
library(manipulate)
myPlot <- function(s){
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0,s)
}
# manipulate(myPlot(s), slider = x(0,2, step=0.1))
# manipulate(myPlot, s = slider(0,2, step=0.1))
# manipulate(myPlot(s), x.s = slider(0,2, step=0.1))
manipulate(myPlot(s), s = slider(0,2, step=0.1))
quit()
library(shiny)
})
run_app("DevelopingDataProducts")
library(shiny)
run_app("DevelopingDataProducts")
runApp("DevelopingDataProducts")
shiny::runApp('gitrepo/DevelopingDataProducts/DevelopingDataProducts')
shiny::runApp('gitrepo/DevelopingDataProducts/DevelopingDataProducts')
shiny::runApp('gitrepo/DevelopingDataProducts/DevelopingDataProducts')
multiplot(p1, p2, p3, p4, cols=2)
shiny::runApp('gitrepo/DevelopingDataProducts/DevelopingDataProducts')
shiny::runApp('gitrepo/DevelopingDataProducts/DevelopingDataProducts')
shiny::runApp('gitrepo/DevelopingDataProducts/DevelopingDataProducts')
shiny::runApp('gitrepo/DevelopingDataProducts/DevelopingDataProducts')
shiny::runApp('gitrepo/DevelopingDataProducts/DevelopingDataProducts')
q()
shiny::runApp('gitrepo/DevelopingDataProducts/DevelopingDataProducts')
vec <- c(1,2,4,5,6,8)
df <- as.data.frame(vec)
df
samples <- sample(2:12, size = 100 ,replace = TRUE , prob = table(outer(1:6,1:6,"+")) / 36)
samples
df <- as.data.frame(samples)
df
str(samples)
shiny::runApp('gitrepo/DevelopingDataProducts/DevelopingDataProducts')
shiny::runApp('gitrepo/DevelopingDataProducts/DevelopingDataProducts')
shiny::runApp('gitrepo/DevelopingDataProducts/DevelopingDataProducts')
value = 100
samples <- sample(2:12, size = value ,replace = TRUE , prob = table(outer(1:6,1:6,"+")) / 36)
samples
shiny::runApp('gitrepo/DevelopingDataProducts/DevelopingDataProducts')
diceRollsPerGame <- 10
samples <- sample(2:12, size = diceRollsPerGame ,replace = TRUE , prob = table(outer(1:6,1:6,"+")) / 36)
diceRolls <- vector()
diceRolls <- c(diceRolls, samples)
diceRoll
diceRolls
dfDiceRolls <- as.data.frame(diceRolls)
dfDiceRolls
plot <y- ggpolt() + aes(dfDiceRolls)
plot <- ggplot() + aes(dfDiceRolls)
plot
plot <- ggplot() + aes(dfDiceRolls) + geom_histogram()
plot
print(plot
)
plot <- ggplot(dfDiceRolls) + geom_histogram()
print(plot)
plot <- ggplot(dfDiceRolls) + aes(x=diceRolls) + geom_histogram()
print(plot)
shiny::runApp('gitrepo/DevelopingDataProducts/DevelopingDataProducts')
shiny::runApp('gitrepo/DevelopingDataProducts/DevelopingDataProducts')
shiny::runApp('gitrepo/DevelopingDataProducts/DevelopingDataProducts')
shiny::runApp('gitrepo/DevelopingDataProducts/DevelopingDataProducts')
q()
setwd("~/gitrepo/DevelopingDataProducts/DevelopingDataProducts")
shiny::runApp()
runExample("03_reactivity")
shiny::runApp()
runExample("03_reactivity")
shiny::runApp()
runExample("03_reactivity")
shiny::runApp()
shiny::runApp()
runExample("03_reactivity")
shiny::runApp()
runExample("04_mpg")
runExample("05_sliders")
shiny::runApp()
shiny::runApp()
runExample("05_sliders")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
c(min(diceRolls) - 1 : max(diceRolls) + 1)
c(1:13)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runExample("05_sliders")
runExample("02_text")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
a <- c(1,2,3,4,5,6,7)
summary(a)
b <- summary(a)
b
shiny::runApp()
runExample("03_reactivity")
shiny::runApp()
meanValue <- 0
meanAllDice <- 0
sdGame <- 0
sdAllDice <- 0
b <- as.data.frame(c(meanValue, meanAllDice, sdGame, sdAllDice))
b
b <- data.table("mean"=meanValue, "meanAll"=meanAllDice, "sdGame"=sdGame, "sdAll"=sdAllDice)
library(dplyr)
b <- data.table("mean"=meanValue, "meanAll"=meanAllDice, "sdGame"=sdGame, "sdAll"=sdAllDice)
library(ggplot2)
b <- data.table("mean"=meanValue, "meanAll"=meanAllDice, "sdGame"=sdGame, "sdAll"=sdAllDice)
library(data.table)
install.packages('data.table')
library(data.table)
b <- data.table("mean"=meanValue, "meanAll"=meanAllDice, "sdGame"=sdGame, "sdAll"=sdAllDice)
b
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runExample("05_sliders")
shiny::runApp()
shiny::runApp()
q()
